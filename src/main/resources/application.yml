server:
  port: 8080
#h2配置

  ##数据库连接设置

  # 进行该配置后，h2 web consloe就可以在远程访问了。否则只能在本机访问。
#  spring.h2.console.settings.web-allow-others=true
#  #进行该配置，你就可以通过YOUR_URL/h2访问h2 web consloe。YOUR_URL是你程序的访问URl。
#  spring.h2.console.path=/h2
#  #进行该配置，程序开启时就会启动h2 web consloe。当然这是默认的，如果你不想在启动程序时启动h2 web consloe，那么就设置为false。
#  spring.h2.console.enabled=true
spring:
  h2:
    console:
      settings:
        web-allow-others: true
  #  #进行该配置，你就可以通过YOUR_URL/h2访问h2 web consloe。YOUR_URL是你程序的访问URl。
      path: /h2
  #  #进行该配置，程序开启时就会启动h2 web consloe。当然这是默认的，如果你不想在启动程序时启动h2 web consloe，那么就设置为false。
      enabled: true
  devtools:
    restart:
      enabled: true
  #启用SQL语句的日志记录
  jpa:
#    show-sql: true
  #设置ddl模式
    hibernate:
      ddl-auto: update
  datasource:
    #h2
    driverClassName: org.h2.Driver
    #spring.datasource.url = jdbc:h2:mem:dbc2m
    #Windows当前用户路径
    #spring.datasource.url = jdbc:h2:file:~/.h2/dbc2m;AUTO_SERVER=TRUE
    #可执行程序的当前路径
#    url: jdbc:h2:file:./dbh2/dbc2m;AUTO_SERVER=TRUE
    url: jdbc:h2:file:./h2/code-generator;AUTO_SERVER=TRUE
    #指定的静态配置路径
    #spring.datasource.url = jdbc:h2:file:D:/db/.h2/dbc2m;AUTO_SERVER=TRUE
    username: sa
    password:
#    initialization-mode: always

    ##数据初始化设置
    #进行该配置后，每次启动程序，程序都会运行resources/db/schema.sql文件，对数据库的结构进行操作。
#    schema: classpath:db/store.sql
    #进行该配置后，每次启动程序，程序都会运行resources/db/data.sql文件，对数据库的数据操作。
#    data: classpath:db/data.sql

    ##h2 web console设置
    #表明使用的数据库平台是h2
    platform: h2



#
#    username: root
#    password: 123456
#    driver-class-name: com.mysql.cj.jdbc.Driver
#    url: jdbc:mysql://42.194.207.182:3306/store?serverTimezone=GMT%2B8&characterEncoding=UTF8
#    initialSize: 5
#    minIdle: 10
#    maxActive: 1000
#        #配置获取连接等待超时的时间
#    maxWait: 60000
#        #配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
#    timeBetweenEvictionRunsMillis: 60000
#        #配置一个连接在池中最小生存的时间，单位是毫秒
#    minEvictableIdleTimeMillis: 300000
#  #验证连接是否有效。此参数必须设置为非空字符串，下面三项设置成true才能生效
#    validationQuery: SELECT 1
##指明连接是否被空闲连接回收器(如果有)进行检验.如果检测失败,则连接将被从池中去除.
#    testWhileIdle: true
# #指明是否在从池中取出连接前进行检验,如果检验失败,则从池中去除连接并尝试取出另一个
#    testOnBorrow: true
##指明是否在归还到池中前进行检验
#    testOnReturn: false
#
#


mybatis-plus:
  configuration:
    map-underscore-to-camel-case: true
    auto-mapping-behavior: full
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
  mapper-locations: classpath*:mapper/**/*Mapper.xml
logging:
  level:
    org.jnativehook: error